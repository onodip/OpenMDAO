
%%% Preamble Requirements %%%
% \usepackage{geometry}
% \usepackage{amsfonts}
% \usepackage{amsmath}
% \usepackage{amssymb}
% \usepackage{sfmath}
% \usepackage{tikz}

% \usetikzlibrary{arrows,chains,positioning,scopes,shapes.geometric,shapes.misc,shadows}

%%% End Preamble Requirements %%%

\input{ D:/Documents/GitHub/OpenMDAO/venv/lib/site-packages/pyxdsm/diagram_styles }
\begin{tikzpicture}

\matrix[MatrixSetup]{
%Row 0
&
\node [DataIO] (output_Driver) {$\begin{array}{c}x^{(0)}\end{array}$};&
&
&
&
&
&
&
&
\\
%Row 1
\node [DataIO] (left_output_Driver) {$\begin{array}{c}x^{*}\end{array}$};&
\node [Optimization] (Driver) {$\text{1, 9$ \rightarrow $ 2: Driver}$};&
\node [DataInter] (Driver-px) {$\begin{array}{c}x\end{array}$};&
\node [DataInter] (Driver-pz) {$\begin{array}{c}z\end{array}$};&
&
&
&
&
&
\\
%Row 2
\node [DataIO] (left_output_px) {$\begin{array}{c}x^{*}\end{array}$};&
&
\node [Function] (px) {$\text{2: px}$};&
&
\node [DataInter] (px-cycle@d1) {$\begin{array}{c}x\end{array}$};&
&
\node [DataInter] (px-obj@cmp) {$\begin{array}{c}x\end{array}$};&
&
&
\\
%Row 3
\node [DataIO] (left_output_pz) {$\begin{array}{c}z^{*}\end{array}$};&
&
&
\node [Function] (pz) {$\text{3: pz}$};&
\node [DataInter] (pz-cycle@d1) {$\begin{array}{c}z\end{array}$};&
\node [DataInter] (pz-cycle@d2) {$\begin{array}{c}z\end{array}$};&
\node [DataInter] (pz-obj@cmp) {$\begin{array}{c}z\end{array}$};&
&
&
\\
%Row 4
&
&
&
&
\node [Analysis] (cycle@d1) {$\text{4: d1}$};&
\node [DataInter] (cycle@d1-cycle@d2) {$\begin{array}{c}y1\end{array}$};&
\node [DataInter] (cycle@d1-obj@cmp) {$\begin{array}{c}y1\end{array}$};&
\node [DataInter] (cycle@d1-con@cmp1) {$\begin{array}{c}y1\end{array}$};&
&
\\
%Row 5
&
&
&
&
\node [DataInter] (cycle@d2-cycle@d1) {$\begin{array}{c}y2\end{array}$};&
\node [Analysis] (cycle@d2) {$\text{5: d2}$};&
\node [DataInter] (cycle@d2-obj@cmp) {$\begin{array}{c}y2\end{array}$};&
&
\node [DataInter] (cycle@d2-con@cmp2) {$\begin{array}{c}y2\end{array}$};&
\\
%Row 6
\node [DataIO] (left_output_obj@cmp) {$\begin{array}{c}obj^{*}\end{array}$};&
\node [DataInter] (obj@cmp-Driver) {$\begin{array}{c}obj\end{array}$};&
&
&
&
&
\node [Function] (obj@cmp) {$\text{6: obj\_cmp}$};&
&
&
\\
%Row 7
\node [DataIO] (left_output_con@cmp1) {$\begin{array}{c}con1^{*}\end{array}$};&
\node [DataInter] (con@cmp1-Driver) {$\begin{array}{c}con1\end{array}$};&
&
&
&
&
&
\node [Function] (con@cmp1) {$\text{7: con\_cmp1}$};&
&
\\
%Row 8
\node [DataIO] (left_output_con@cmp2) {$\begin{array}{c}con2^{*}\end{array}$};&
\node [DataInter] (con@cmp2-Driver) {$\begin{array}{c}con2\end{array}$};&
&
&
&
&
&
&
\node [Function] (con@cmp2) {$\text{8: con\_cmp2}$};&
\\
%Row 9
&
&
&
&
&
&
&
&
&
\\
};

% XDSM process chains
{ [start chain=process]
 \begin{pgfonlayer}{process} 
\chainin (Driver);
\chainin (px) [join=by ProcessHV];
\chainin (pz) [join=by ProcessHV];
\chainin (cycle@d1) [join=by ProcessHV];
\chainin (cycle@d2) [join=by ProcessHV];
\chainin (obj@cmp) [join=by ProcessHV];
\chainin (con@cmp1) [join=by ProcessHV];
\chainin (con@cmp2) [join=by ProcessHV];
\chainin (Driver) [join=by ProcessHV];
\end{pgfonlayer}
}

\begin{pgfonlayer}{data}
\path
% Horizontal edges
(Driver) edge [DataLine] (Driver-pz)
(Driver) edge [DataLine] (Driver-px)
(con@cmp1) edge [DataLine] (con@cmp1-Driver)
(con@cmp2) edge [DataLine] (con@cmp2-Driver)
(obj@cmp) edge [DataLine] (obj@cmp-Driver)
(cycle@d2) edge [DataLine] (cycle@d2-con@cmp2)
(cycle@d2) edge [DataLine] (cycle@d2-cycle@d1)
(cycle@d2) edge [DataLine] (cycle@d2-obj@cmp)
(pz) edge [DataLine] (pz-cycle@d2)
(pz) edge [DataLine] (pz-cycle@d1)
(pz) edge [DataLine] (pz-obj@cmp)
(px) edge [DataLine] (px-cycle@d1)
(px) edge [DataLine] (px-obj@cmp)
(cycle@d1) edge [DataLine] (cycle@d1-cycle@d2)
(cycle@d1) edge [DataLine] (cycle@d1-con@cmp1)
(cycle@d1) edge [DataLine] (cycle@d1-obj@cmp)
(pz) edge [DataLine] (left_output_pz)
(px) edge [DataLine] (left_output_px)
(Driver) edge [DataLine] (left_output_Driver)
(con@cmp1) edge [DataLine] (left_output_con@cmp1)
(con@cmp2) edge [DataLine] (left_output_con@cmp2)
(obj@cmp) edge [DataLine] (left_output_obj@cmp)
% Vertical edges
(Driver-pz) edge [DataLine] (pz)
(Driver-px) edge [DataLine] (px)
(con@cmp1-Driver) edge [DataLine] (Driver)
(con@cmp2-Driver) edge [DataLine] (Driver)
(obj@cmp-Driver) edge [DataLine] (Driver)
(cycle@d2-con@cmp2) edge [DataLine] (con@cmp2)
(cycle@d2-cycle@d1) edge [DataLine] (cycle@d1)
(cycle@d2-obj@cmp) edge [DataLine] (obj@cmp)
(pz-cycle@d2) edge [DataLine] (cycle@d2)
(pz-cycle@d1) edge [DataLine] (cycle@d1)
(pz-obj@cmp) edge [DataLine] (obj@cmp)
(px-cycle@d1) edge [DataLine] (cycle@d1)
(px-obj@cmp) edge [DataLine] (obj@cmp)
(cycle@d1-cycle@d2) edge [DataLine] (cycle@d2)
(cycle@d1-con@cmp1) edge [DataLine] (con@cmp1)
(cycle@d1-obj@cmp) edge [DataLine] (obj@cmp)
(Driver) edge [DataLine] (output_Driver);
\end{pgfonlayer}

\end{tikzpicture}
